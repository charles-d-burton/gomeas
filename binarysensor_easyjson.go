// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package gomeas

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonFf1721c5DecodeGithubComCharlesDBurtonGomeas(in *jlexer.Lexer, out *BinarySensorState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "state":
			out.State = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFf1721c5EncodeGithubComCharlesDBurtonGomeas(out *jwriter.Writer, in BinarySensorState) {
	out.RawByte('{')
	first := true
	_ = first
	if in.State != "" {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.State))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BinarySensorState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFf1721c5EncodeGithubComCharlesDBurtonGomeas(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BinarySensorState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFf1721c5EncodeGithubComCharlesDBurtonGomeas(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BinarySensorState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFf1721c5DecodeGithubComCharlesDBurtonGomeas(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BinarySensorState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFf1721c5DecodeGithubComCharlesDBurtonGomeas(l, v)
}
func easyjsonFf1721c5DecodeGithubComCharlesDBurtonGomeas1(in *jlexer.Lexer, out *BinarySensor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "encoding":
			out.Encoding = string(in.String())
		case "entity_category":
			out.EntityCategory = string(in.String())
		case "entity_picture":
			out.EntityPicture = string(in.String())
		case "expire_after":
			out.ExpireAfter = int(in.Int())
		case "force_update":
			out.ForceUpdate = bool(in.Bool())
		case "icon":
			out.Icon = string(in.String())
		case "json_attributes_template":
			out.JsonAttributesTemplate = string(in.String())
		case "json_attributes_topic":
			out.JsonAttributesTopic = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "object_id":
			out.ObjectID = string(in.String())
		case "off_delay":
			out.OffDelay = int(in.Int())
		case "payload_available":
			out.PayloadAvailable = string(in.String())
		case "payload_not_available":
			out.PayloadNotAvailable = string(in.String())
		case "payload_off":
			out.PayloadOff = string(in.String())
		case "payload_on":
			out.PayloadOn = string(in.String())
		case "platform":
			out.Platform = string(in.String())
		case "qos":
			out.Qos = int(in.Int())
		case "state_topic":
			out.StateTopic = string(in.String())
		case "unique_id":
			out.UniqueID = string(in.String())
		case "value_template":
			out.ValueTemplate = string(in.String())
		case "availability":
			if in.IsNull() {
				in.Skip()
				out.Availability = nil
			} else {
				in.Delim('[')
				if out.Availability == nil {
					if !in.IsDelim(']') {
						out.Availability = make([]*Availability, 0, 8)
					} else {
						out.Availability = []*Availability{}
					}
				} else {
					out.Availability = (out.Availability)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Availability
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Availability)
						}
						easyjsonFf1721c5DecodeGithubComCharlesDBurtonGomeas2(in, v1)
					}
					out.Availability = append(out.Availability, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "availibility_mode":
			if in.IsNull() {
				in.Skip()
				out.AvailibilityMode = nil
			} else {
				if out.AvailibilityMode == nil {
					out.AvailibilityMode = new(string)
				}
				*out.AvailibilityMode = string(in.String())
			}
		case "availability_template":
			if in.IsNull() {
				in.Skip()
				out.AvailabilityTemplate = nil
			} else {
				if out.AvailabilityTemplate == nil {
					out.AvailabilityTemplate = new(string)
				}
				*out.AvailabilityTemplate = string(in.String())
			}
		case "availability_topic":
			if in.IsNull() {
				in.Skip()
				out.AvailabilityTopic = nil
			} else {
				if out.AvailabilityTopic == nil {
					out.AvailabilityTopic = new(string)
				}
				*out.AvailabilityTopic = string(in.String())
			}
		case "device_class":
			out.DeviceClass = string(in.String())
		case "command_topic":
			if in.IsNull() {
				in.Skip()
				out.ComamandTopic = nil
			} else {
				if out.ComamandTopic == nil {
					out.ComamandTopic = new(string)
				}
				*out.ComamandTopic = string(in.String())
			}
		case "device":
			if in.IsNull() {
				in.Skip()
				out.Device = nil
			} else {
				if out.Device == nil {
					out.Device = new(Device)
				}
				easyjsonFf1721c5DecodeGithubComCharlesDBurtonGomeas3(in, out.Device)
			}
		case "components":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Components = make(map[string]Component)
				} else {
					out.Components = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 Component
					easyjsonFf1721c5DecodeGithubComCharlesDBurtonGomeas4(in, &v2)
					(out.Components)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "enabled_by_default":
			out.EnabledByDefault = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFf1721c5EncodeGithubComCharlesDBurtonGomeas1(out *jwriter.Writer, in BinarySensor) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Encoding != "" {
		const prefix string = ",\"encoding\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Encoding))
	}
	if in.EntityCategory != "" {
		const prefix string = ",\"entity_category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EntityCategory))
	}
	if in.EntityPicture != "" {
		const prefix string = ",\"entity_picture\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EntityPicture))
	}
	if in.ExpireAfter != 0 {
		const prefix string = ",\"expire_after\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ExpireAfter))
	}
	if in.ForceUpdate {
		const prefix string = ",\"force_update\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ForceUpdate))
	}
	if in.Icon != "" {
		const prefix string = ",\"icon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Icon))
	}
	if in.JsonAttributesTemplate != "" {
		const prefix string = ",\"json_attributes_template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JsonAttributesTemplate))
	}
	if in.JsonAttributesTopic != "" {
		const prefix string = ",\"json_attributes_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JsonAttributesTopic))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.ObjectID != "" {
		const prefix string = ",\"object_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ObjectID))
	}
	if in.OffDelay != 0 {
		const prefix string = ",\"off_delay\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OffDelay))
	}
	if in.PayloadAvailable != "" {
		const prefix string = ",\"payload_available\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PayloadAvailable))
	}
	if in.PayloadNotAvailable != "" {
		const prefix string = ",\"payload_not_available\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PayloadNotAvailable))
	}
	if in.PayloadOff != "" {
		const prefix string = ",\"payload_off\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PayloadOff))
	}
	if in.PayloadOn != "" {
		const prefix string = ",\"payload_on\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PayloadOn))
	}
	if in.Platform != "" {
		const prefix string = ",\"platform\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Platform))
	}
	if in.Qos != 0 {
		const prefix string = ",\"qos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Qos))
	}
	if in.StateTopic != "" {
		const prefix string = ",\"state_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StateTopic))
	}
	if in.UniqueID != "" {
		const prefix string = ",\"unique_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UniqueID))
	}
	if in.ValueTemplate != "" {
		const prefix string = ",\"value_template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ValueTemplate))
	}
	if len(in.Availability) != 0 {
		const prefix string = ",\"availability\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.Availability {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					easyjsonFf1721c5EncodeGithubComCharlesDBurtonGomeas2(out, *v4)
				}
			}
			out.RawByte(']')
		}
	}
	if in.AvailibilityMode != nil {
		const prefix string = ",\"availibility_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AvailibilityMode))
	}
	if in.AvailabilityTemplate != nil {
		const prefix string = ",\"availability_template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AvailabilityTemplate))
	}
	if in.AvailabilityTopic != nil {
		const prefix string = ",\"availability_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AvailabilityTopic))
	}
	if in.DeviceClass != "" {
		const prefix string = ",\"device_class\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeviceClass))
	}
	if in.ComamandTopic != nil {
		const prefix string = ",\"command_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ComamandTopic))
	}
	if in.Device != nil {
		const prefix string = ",\"device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonFf1721c5EncodeGithubComCharlesDBurtonGomeas3(out, *in.Device)
	}
	if len(in.Components) != 0 {
		const prefix string = ",\"components\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Components {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				easyjsonFf1721c5EncodeGithubComCharlesDBurtonGomeas4(out, v5Value)
			}
			out.RawByte('}')
		}
	}
	if in.EnabledByDefault {
		const prefix string = ",\"enabled_by_default\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.EnabledByDefault))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BinarySensor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFf1721c5EncodeGithubComCharlesDBurtonGomeas1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BinarySensor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFf1721c5EncodeGithubComCharlesDBurtonGomeas1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BinarySensor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFf1721c5DecodeGithubComCharlesDBurtonGomeas1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BinarySensor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFf1721c5DecodeGithubComCharlesDBurtonGomeas1(l, v)
}
func easyjsonFf1721c5DecodeGithubComCharlesDBurtonGomeas4(in *jlexer.Lexer, out *Component) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "p":
			out.P = string(in.String())
		case "device_class":
			out.DeviceClass = string(in.String())
		case "unit_of_measurement":
			out.UnitOfMeasurement = string(in.String())
		case "value_template":
			out.ValueTemplate = string(in.String())
		case "unique_id":
			out.UniqueID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFf1721c5EncodeGithubComCharlesDBurtonGomeas4(out *jwriter.Writer, in Component) {
	out.RawByte('{')
	first := true
	_ = first
	if in.P != "" {
		const prefix string = ",\"p\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.P))
	}
	if in.DeviceClass != "" {
		const prefix string = ",\"device_class\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeviceClass))
	}
	if in.UnitOfMeasurement != "" {
		const prefix string = ",\"unit_of_measurement\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UnitOfMeasurement))
	}
	if in.ValueTemplate != "" {
		const prefix string = ",\"value_template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ValueTemplate))
	}
	if in.UniqueID != "" {
		const prefix string = ",\"unique_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UniqueID))
	}
	out.RawByte('}')
}
func easyjsonFf1721c5DecodeGithubComCharlesDBurtonGomeas3(in *jlexer.Lexer, out *Device) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "configuration_url":
			if in.IsNull() {
				in.Skip()
				out.ConfigurationURL = nil
			} else {
				if out.ConfigurationURL == nil {
					out.ConfigurationURL = new(string)
				}
				*out.ConfigurationURL = string(in.String())
			}
		case "connections":
			if in.IsNull() {
				in.Skip()
				out.Connections = nil
			} else {
				in.Delim('[')
				if out.Connections == nil {
					if !in.IsDelim(']') {
						out.Connections = make([]string, 0, 4)
					} else {
						out.Connections = []string{}
					}
				} else {
					out.Connections = (out.Connections)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.Connections = append(out.Connections, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hw_version":
			if in.IsNull() {
				in.Skip()
				out.HardwareVersion = nil
			} else {
				if out.HardwareVersion == nil {
					out.HardwareVersion = new(string)
				}
				*out.HardwareVersion = string(in.String())
			}
		case "identifiers":
			if in.IsNull() {
				in.Skip()
				out.Identifiers = nil
			} else {
				in.Delim('[')
				if out.Identifiers == nil {
					if !in.IsDelim(']') {
						out.Identifiers = make([]string, 0, 4)
					} else {
						out.Identifiers = []string{}
					}
				} else {
					out.Identifiers = (out.Identifiers)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Identifiers = append(out.Identifiers, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "manufacturer":
			if in.IsNull() {
				in.Skip()
				out.Manufacturer = nil
			} else {
				if out.Manufacturer == nil {
					out.Manufacturer = new(string)
				}
				*out.Manufacturer = string(in.String())
			}
		case "model":
			if in.IsNull() {
				in.Skip()
				out.Model = nil
			} else {
				if out.Model == nil {
					out.Model = new(string)
				}
				*out.Model = string(in.String())
			}
		case "model_id":
			if in.IsNull() {
				in.Skip()
				out.ModelID = nil
			} else {
				if out.ModelID == nil {
					out.ModelID = new(string)
				}
				*out.ModelID = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "serial_number":
			if in.IsNull() {
				in.Skip()
				out.SerialNumber = nil
			} else {
				if out.SerialNumber == nil {
					out.SerialNumber = new(string)
				}
				*out.SerialNumber = string(in.String())
			}
		case "suggested_area":
			if in.IsNull() {
				in.Skip()
				out.SuggestedArea = nil
			} else {
				if out.SuggestedArea == nil {
					out.SuggestedArea = new(string)
				}
				*out.SuggestedArea = string(in.String())
			}
		case "software_version":
			if in.IsNull() {
				in.Skip()
				out.SoftwareVersion = nil
			} else {
				if out.SoftwareVersion == nil {
					out.SoftwareVersion = new(string)
				}
				*out.SoftwareVersion = string(in.String())
			}
		case "via_device":
			if in.IsNull() {
				in.Skip()
				out.ViaDevice = nil
			} else {
				if out.ViaDevice == nil {
					out.ViaDevice = new(string)
				}
				*out.ViaDevice = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFf1721c5EncodeGithubComCharlesDBurtonGomeas3(out *jwriter.Writer, in Device) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ConfigurationURL != nil {
		const prefix string = ",\"configuration_url\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.ConfigurationURL))
	}
	if len(in.Connections) != 0 {
		const prefix string = ",\"connections\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Connections {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if in.HardwareVersion != nil {
		const prefix string = ",\"hw_version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.HardwareVersion))
	}
	if len(in.Identifiers) != 0 {
		const prefix string = ",\"identifiers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.Identifiers {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	if in.Manufacturer != nil {
		const prefix string = ",\"manufacturer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Manufacturer))
	}
	if in.Model != nil {
		const prefix string = ",\"model\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Model))
	}
	if in.ModelID != nil {
		const prefix string = ",\"model_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ModelID))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.SerialNumber != nil {
		const prefix string = ",\"serial_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SerialNumber))
	}
	if in.SuggestedArea != nil {
		const prefix string = ",\"suggested_area\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SuggestedArea))
	}
	if in.SoftwareVersion != nil {
		const prefix string = ",\"software_version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SoftwareVersion))
	}
	if in.ViaDevice != nil {
		const prefix string = ",\"via_device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ViaDevice))
	}
	out.RawByte('}')
}
func easyjsonFf1721c5DecodeGithubComCharlesDBurtonGomeas2(in *jlexer.Lexer, out *Availability) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "payload_available":
			out.PayloadAvailable = string(in.String())
		case "payload_not_available":
			out.PayloadNotAvailable = string(in.String())
		case "topic":
			out.Topic = string(in.String())
		case "value_template":
			out.ValueTemplate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFf1721c5EncodeGithubComCharlesDBurtonGomeas2(out *jwriter.Writer, in Availability) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PayloadAvailable != "" {
		const prefix string = ",\"payload_available\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.PayloadAvailable))
	}
	if in.PayloadNotAvailable != "" {
		const prefix string = ",\"payload_not_available\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PayloadNotAvailable))
	}
	if in.Topic != "" {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Topic))
	}
	if in.ValueTemplate != "" {
		const prefix string = ",\"value_template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ValueTemplate))
	}
	out.RawByte('}')
}
