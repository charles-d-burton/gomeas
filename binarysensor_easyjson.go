// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package gomeas

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonFf1721c5DecodeGithubComCharlesDBurtonGomeas(in *jlexer.Lexer, out *BinarySensorState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "state":
			out.State = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFf1721c5EncodeGithubComCharlesDBurtonGomeas(out *jwriter.Writer, in BinarySensorState) {
	out.RawByte('{')
	first := true
	_ = first
	if in.State != "" {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.State))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BinarySensorState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFf1721c5EncodeGithubComCharlesDBurtonGomeas(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BinarySensorState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFf1721c5EncodeGithubComCharlesDBurtonGomeas(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BinarySensorState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFf1721c5DecodeGithubComCharlesDBurtonGomeas(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BinarySensorState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFf1721c5DecodeGithubComCharlesDBurtonGomeas(l, v)
}
func easyjsonFf1721c5DecodeGithubComCharlesDBurtonGomeas1(in *jlexer.Lexer, out *BinarySensor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "encoding":
			out.Encoding = string(in.String())
		case "entity_category":
			if in.IsNull() {
				in.Skip()
				out.EntityCategory = nil
			} else {
				if out.EntityCategory == nil {
					out.EntityCategory = new(string)
				}
				*out.EntityCategory = string(in.String())
			}
		case "entity_picture":
			if in.IsNull() {
				in.Skip()
				out.EntityPicture = nil
			} else {
				if out.EntityPicture == nil {
					out.EntityPicture = new(string)
				}
				*out.EntityPicture = string(in.String())
			}
		case "expire_after":
			if in.IsNull() {
				in.Skip()
				out.ExpireAfter = nil
			} else {
				if out.ExpireAfter == nil {
					out.ExpireAfter = new(int)
				}
				*out.ExpireAfter = int(in.Int())
			}
		case "force_update":
			if in.IsNull() {
				in.Skip()
				out.ForceUpdate = nil
			} else {
				if out.ForceUpdate == nil {
					out.ForceUpdate = new(bool)
				}
				*out.ForceUpdate = bool(in.Bool())
			}
		case "icon":
			if in.IsNull() {
				in.Skip()
				out.Icon = nil
			} else {
				if out.Icon == nil {
					out.Icon = new(string)
				}
				*out.Icon = string(in.String())
			}
		case "json_attributes_template":
			if in.IsNull() {
				in.Skip()
				out.JsonAttributesTemplate = nil
			} else {
				if out.JsonAttributesTemplate == nil {
					out.JsonAttributesTemplate = new(string)
				}
				*out.JsonAttributesTemplate = string(in.String())
			}
		case "json_attributes_topic":
			if in.IsNull() {
				in.Skip()
				out.JsonAttributesTopic = nil
			} else {
				if out.JsonAttributesTopic == nil {
					out.JsonAttributesTopic = new(string)
				}
				*out.JsonAttributesTopic = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "object_id":
			if in.IsNull() {
				in.Skip()
				out.ObjectID = nil
			} else {
				if out.ObjectID == nil {
					out.ObjectID = new(string)
				}
				*out.ObjectID = string(in.String())
			}
		case "off_delay":
			if in.IsNull() {
				in.Skip()
				out.OffDelay = nil
			} else {
				if out.OffDelay == nil {
					out.OffDelay = new(int)
				}
				*out.OffDelay = int(in.Int())
			}
		case "payload_available":
			if in.IsNull() {
				in.Skip()
				out.PayloadAvailable = nil
			} else {
				if out.PayloadAvailable == nil {
					out.PayloadAvailable = new(string)
				}
				*out.PayloadAvailable = string(in.String())
			}
		case "payload_not_available":
			if in.IsNull() {
				in.Skip()
				out.PayloadNotAvailable = nil
			} else {
				if out.PayloadNotAvailable == nil {
					out.PayloadNotAvailable = new(string)
				}
				*out.PayloadNotAvailable = string(in.String())
			}
		case "payload_off":
			if in.IsNull() {
				in.Skip()
				out.PayloadOff = nil
			} else {
				if out.PayloadOff == nil {
					out.PayloadOff = new(string)
				}
				*out.PayloadOff = string(in.String())
			}
		case "payload_on":
			if in.IsNull() {
				in.Skip()
				out.PayloadOn = nil
			} else {
				if out.PayloadOn == nil {
					out.PayloadOn = new(string)
				}
				*out.PayloadOn = string(in.String())
			}
		case "platform":
			out.Platform = string(in.String())
		case "qos":
			if in.IsNull() {
				in.Skip()
				out.Qos = nil
			} else {
				if out.Qos == nil {
					out.Qos = new(int)
				}
				*out.Qos = int(in.Int())
			}
		case "state_topic":
			out.StateTopic = string(in.String())
		case "unique_id":
			if in.IsNull() {
				in.Skip()
				out.UniqueID = nil
			} else {
				if out.UniqueID == nil {
					out.UniqueID = new(string)
				}
				*out.UniqueID = string(in.String())
			}
		case "value_template":
			if in.IsNull() {
				in.Skip()
				out.ValueTemplate = nil
			} else {
				if out.ValueTemplate == nil {
					out.ValueTemplate = new(string)
				}
				*out.ValueTemplate = string(in.String())
			}
		case "availability":
			if in.IsNull() {
				in.Skip()
				out.Availability = nil
			} else {
				in.Delim('[')
				if out.Availability == nil {
					if !in.IsDelim(']') {
						out.Availability = make([]*Availability, 0, 8)
					} else {
						out.Availability = []*Availability{}
					}
				} else {
					out.Availability = (out.Availability)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Availability
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Availability)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Availability = append(out.Availability, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "availibility_mode":
			if in.IsNull() {
				in.Skip()
				out.AvailibilityMode = nil
			} else {
				if out.AvailibilityMode == nil {
					out.AvailibilityMode = new(string)
				}
				*out.AvailibilityMode = string(in.String())
			}
		case "availability_template":
			if in.IsNull() {
				in.Skip()
				out.AvailabilityTemplate = nil
			} else {
				if out.AvailabilityTemplate == nil {
					out.AvailabilityTemplate = new(string)
				}
				*out.AvailabilityTemplate = string(in.String())
			}
		case "availability_topic":
			if in.IsNull() {
				in.Skip()
				out.AvailabilityTopic = nil
			} else {
				if out.AvailabilityTopic == nil {
					out.AvailabilityTopic = new(string)
				}
				*out.AvailabilityTopic = string(in.String())
			}
		case "device_class":
			out.DeviceClass = string(in.String())
		case "command_topic":
			if in.IsNull() {
				in.Skip()
				out.CommandTopic = nil
			} else {
				if out.CommandTopic == nil {
					out.CommandTopic = new(string)
				}
				*out.CommandTopic = string(in.String())
			}
		case "device":
			if in.IsNull() {
				in.Skip()
				out.Device = nil
			} else {
				if out.Device == nil {
					out.Device = new(Device)
				}
				(*out.Device).UnmarshalEasyJSON(in)
			}
		case "components":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Components = make(map[string]Component)
				} else {
					out.Components = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 Component
					(v2).UnmarshalEasyJSON(in)
					(out.Components)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "enabled_by_default":
			out.EnabledByDefault = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFf1721c5EncodeGithubComCharlesDBurtonGomeas1(out *jwriter.Writer, in BinarySensor) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Encoding != "" {
		const prefix string = ",\"encoding\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Encoding))
	}
	if in.EntityCategory != nil {
		const prefix string = ",\"entity_category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EntityCategory))
	}
	if in.EntityPicture != nil {
		const prefix string = ",\"entity_picture\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EntityPicture))
	}
	if in.ExpireAfter != nil {
		const prefix string = ",\"expire_after\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.ExpireAfter))
	}
	if in.ForceUpdate != nil {
		const prefix string = ",\"force_update\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.ForceUpdate))
	}
	if in.Icon != nil {
		const prefix string = ",\"icon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Icon))
	}
	if in.JsonAttributesTemplate != nil {
		const prefix string = ",\"json_attributes_template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.JsonAttributesTemplate))
	}
	if in.JsonAttributesTopic != nil {
		const prefix string = ",\"json_attributes_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.JsonAttributesTopic))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.ObjectID != nil {
		const prefix string = ",\"object_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ObjectID))
	}
	if in.OffDelay != nil {
		const prefix string = ",\"off_delay\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.OffDelay))
	}
	if in.PayloadAvailable != nil {
		const prefix string = ",\"payload_available\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PayloadAvailable))
	}
	if in.PayloadNotAvailable != nil {
		const prefix string = ",\"payload_not_available\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PayloadNotAvailable))
	}
	if in.PayloadOff != nil {
		const prefix string = ",\"payload_off\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PayloadOff))
	}
	if in.PayloadOn != nil {
		const prefix string = ",\"payload_on\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PayloadOn))
	}
	if in.Platform != "" {
		const prefix string = ",\"platform\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Platform))
	}
	if in.Qos != nil {
		const prefix string = ",\"qos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.Qos))
	}
	if in.StateTopic != "" {
		const prefix string = ",\"state_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StateTopic))
	}
	if in.UniqueID != nil {
		const prefix string = ",\"unique_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UniqueID))
	}
	if in.ValueTemplate != nil {
		const prefix string = ",\"value_template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ValueTemplate))
	}
	if len(in.Availability) != 0 {
		const prefix string = ",\"availability\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.Availability {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					(*v4).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.AvailibilityMode != nil {
		const prefix string = ",\"availibility_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AvailibilityMode))
	}
	if in.AvailabilityTemplate != nil {
		const prefix string = ",\"availability_template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AvailabilityTemplate))
	}
	if in.AvailabilityTopic != nil {
		const prefix string = ",\"availability_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AvailabilityTopic))
	}
	if in.DeviceClass != "" {
		const prefix string = ",\"device_class\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeviceClass))
	}
	if in.CommandTopic != nil {
		const prefix string = ",\"command_topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CommandTopic))
	}
	if in.Device != nil {
		const prefix string = ",\"device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Device).MarshalEasyJSON(out)
	}
	if len(in.Components) != 0 {
		const prefix string = ",\"components\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Components {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				(v5Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if in.EnabledByDefault {
		const prefix string = ",\"enabled_by_default\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.EnabledByDefault))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BinarySensor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFf1721c5EncodeGithubComCharlesDBurtonGomeas1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BinarySensor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFf1721c5EncodeGithubComCharlesDBurtonGomeas1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BinarySensor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFf1721c5DecodeGithubComCharlesDBurtonGomeas1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BinarySensor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFf1721c5DecodeGithubComCharlesDBurtonGomeas1(l, v)
}
